---
title: "macro_data_cleaning"
format: html
editor: visual
---

## Initial setup

```{r packages}
#| warning: false
#| message: false

# General functionality
library(tidyverse)

# For importing the data
library(sjmisc)
library(haven)
library(janitor)
library(countrycode)
library(stringr)

#for pulling the data from the websites
library(WDI)
library(eurostat)
library(OECD)
library(jsonlite)
```

## ILO Labour Force Participation Rate

I'm pulling the national survey results with ILO modeled estimates filling them in.

```{r}
lf_rate_ilo_raw <- read.csv("https://rplumber.ilo.org/data/indicator/?id=EAP_DWAP_SEX_AGE_RT_A&lang=en&type=label&format=.csv&channel=ilostat&title=labour-force-participation-rate-by-sex-and-age-annual")

lf_rate_ilo <- lf_rate_ilo_raw |> 
  tibble() |> 
  mutate(country = ref_area.label,
         indicator = indicator.label,
         source = source.label,
         age = classif1.label,
         sex = sex.label) |>
  mutate(
    country = case_when(
    country == "United Kingdom of Great Britain and Northern Ireland" ~ "United Kingdom",
    country == "United States of America" ~ "United States",
    country == "Republic of Moldova" ~ "Moldova",
    country == "Russian Federation" ~ "Russia",
    TRUE ~ country  # Keep all other values as they are
  )) |> 
  # pulling my countries
  filter(country %in% unique(micro_clean$country)) |> 
  # pulling appropriate age band
  filter(classif1.label == "Age (Youth, adults): 15-64") |> 
  # filtering out total lfp
  filter(sex.label != "Total") |> 
  select(country, indicator, sex, age, time, obs_value, source) |> 
  arrange(country, sex, age, time)

lf_rate_ilo_modeled_raw <- read.csv("https://rplumber.ilo.org/data/indicator/?id=EAP_2WAP_SEX_AGE_RT_A&lang=en&type=label&format=.csv&channel=ilostat&title=labour-force-participation-rate-by-sex-and-age-ilo-modelled-estimates-annual")

lf_rate_ilo_modeled <- lf_rate_ilo_modeled_raw |> 
  tibble() |> 
  mutate(country = ref_area.label,
         indicator = indicator.label,
         source = source.label,
         age = classif1.label,
         sex = sex.label) |>
  mutate(
    country = case_when(
    country == "United Kingdom of Great Britain and Northern Ireland" ~ "United Kingdom",
    country == "United States of America" ~ "United States",
    country == "Republic of Moldova" ~ "Moldova",
    country == "Russian Federation" ~ "Russia",
    TRUE ~ country  # Keep all other values as they are
  )) |>
  # pulling my countries
  filter(country %in% unique(micro_clean$country)) |> 
  # pulling appropriate age band
  filter(classif1.label == "Age (Youth, adults): 15-64") |> 
  # filtering out total lfp
  filter(sex.label != "Total") |> 
  select(country, indicator, sex, age, time, obs_value, source) |> 
  arrange(country, sex, age, time)

# Now I have to fill in the gaps with the modelled estimates
# filled in the gaps with modelled estimates

lf_rate_combined <- lf_rate_ilo |>
  bind_rows(
    lf_rate_ilo_modeled |>
      anti_join(lf_rate_ilo, by = c("country", "time"))
  ) |> 
  arrange(country, sex, age, time)

# remove intermediates
rm(lf_rate_ilo_raw)
rm(lf_rate_ilo_modeled_raw)
rm(lf_rate_ilo)
rm(lf_rate_ilo_modeled)
```

## ILO unemployment by education

```{r unemployment-by-education}
unemployment_educ_raw <- read.csv("https://rplumber.ilo.org/data/indicator/?id=UNE_DEAP_SEX_AGE_EDU_RT_A&sex=SEX_T+SEX_M+SEX_F&classif1=AGE_YTHADULT_Y15-64&classif2=EDU_ISCED11_TOTAL+EDU_ISCED11_X+EDU_ISCED11_0+EDU_ISCED11_1+EDU_ISCED11_2+EDU_ISCED11_3+EDU_ISCED11_4+EDU_ISCED11_5+EDU_ISCED11_6+EDU_ISCED11_7+EDU_ISCED11_8+EDU_ISCED11_9&timefrom=1970&timeto=2024&type=label&format=.csv")

unemployment_educ <- unemployment_educ_raw |> 
  tibble() |> 
  mutate(country = ref_area.label,
         indicator = indicator.label,
         source = source.label,
         age = classif1.label,
         educ = classif2.label,
         sex = sex.label) |> 
  mutate(
    country = case_when(
    country == "United Kingdom of Great Britain and Northern Ireland" ~ "United Kingdom",
    country == "United States of America" ~ "United States",
    country == "Republic of Moldova" ~ "Moldova",
    country == "Russian Federation" ~ "Russia",
    TRUE ~ country  # Keep all other values as they are
  )) |> 
  # pulling my countries
  filter(country %in% unique(micro_clean$country)) |> 
  select(country, indicator, sex, age, educ, time, obs_value, obs_status.label, source)

unemployment_index <- unemployment_educ |> 
  
  # recoding educ
  mutate(educ = case_when(
    str_detect(educ, "X\\.") ~ "-1",  # If it contains "x."
    TRUE ~ str_extract(educ, "(?<=\\): )\\d+")  # Otherwise extract the number
  )) |>
  
  # grouping educ
  mutate(educ_group = case_when(
    educ < 3 ~ "below upper-secondary",
    educ > 4 ~ "tertiary",
    TRUE ~ "upper-secondary"
  )) |> 

  # just total gender
  filter(sex == "Total") |> 

  # just specific education categories
  filter(educ != "Education (ISCED-11): Total")

# Calculate upper secondary mean
upper_sec_means <- unemployment_index |>
  filter(educ_group == "upper-secondary") |>
  group_by(country, time) |>
  summarise(upper_sec_mean = mean(obs_value))

below_upper_sec_means <- unemployment_index |>
  filter(educ_group == "below upper-secondary") |>
  group_by(country, time) |>
  summarise(below_upper_sec_mean = mean(obs_value))
  
# Join and calculate index
unemployment_index <- unemployment_index |>
  group_by(country, time, educ_group, sex, source, indicator) |> 
  summarise(mean_value = mean(obs_value)) |>
  ungroup() |> 
  left_join(upper_sec_means, by = join_by(country, time)) |>
  left_join(below_upper_sec_means, by = join_by(country, time)) |>
  mutate(upper_sec_index = mean_value / upper_sec_mean * 100,
         below_upper_sec_index = mean_value / below_upper_sec_mean * 100)

# unloading intermediate dfs
rm(upper_sec_means)
rm(bellow_upper_sec_means)

rm(unemployment_educ_raw)
rm(unemployment_educ)
```

## ILO earnings advantage

```{r earnings-advantage}
earnings_educ_raw <- read.csv("https://rplumber.ilo.org/data/indicator/?id=EAR_4MTH_SEX_EDU_CUR_NB_A&sex=SEX_T+SEX_M+SEX_F&classif1=EDU_ISCED11_TOTAL+EDU_ISCED11_X+EDU_ISCED11_0+EDU_ISCED11_1+EDU_ISCED11_2+EDU_ISCED11_3+EDU_ISCED11_4+EDU_ISCED11_5+EDU_ISCED11_6+EDU_ISCED11_7+EDU_ISCED11_8&timefrom=1989&timeto=2024&type=label&format=.csv")

earnings_educ <- earnings_educ_raw |> 
  tibble() |> 
  mutate(country = ref_area.label,
         indicator = indicator.label,
         source = source.label,
         educ = classif1.label,
         currency = classif2.label,
         sex = sex.label) |> 
  mutate(
    country = case_when(
    country == "United Kingdom of Great Britain and Northern Ireland" ~ "United Kingdom",
    country == "United States of America" ~ "United States",
    country == "Republic of Moldova" ~ "Moldova",
    country == "Russian Federation" ~ "Russia",
    TRUE ~ country  # Keep all other values as they are
  )) |> 
  # pulling my countries
  filter(country %in% unique(micro_clean$country)) |> 
  select(country, indicator, sex, educ, currency, time, obs_value, source, note_indicator.label) |> 
  
  # just 2021 ppp $
  filter(currency == "Currency: 2021 PPP $") |>
  
  # just total gender
  filter(sex == "Total") |> 
  
  # just specific education categories
  filter(educ != "Education (ISCED-11): Total") |> 
  
  # recoding the educ
  mutate(educ = case_when(
    str_detect(educ, "X\\.") ~ "-1",  # If it contains "x."
    TRUE ~ str_extract(educ, "(?<=\\): )\\d+")  # Otherwise extract the number
  )) |> 
  
  # breaks in series
  mutate(break_in_series = case_when(
    str_detect(note_indicator.label, "Break in series") ~ 1,
    TRUE ~ 0
  ))

relative_earnings <-  earnings_educ |> 
  
  # Creating educational groups
  mutate(educ_group = case_when(
    educ < 3 ~ "below upper-secondary",
    educ > 4 ~ "tertiary",
    TRUE ~ "upper-secondary"
  ))

# Calculate upper secondary mean
upper_sec_means <- relative_earnings |>
  filter(educ_group == "upper-secondary") |>
  group_by(country, time) |>
  summarise(upper_sec_mean = mean(obs_value))

below_upper_sec_means <- relative_earnings |>
  filter(educ_group == "below upper-secondary") |>
  group_by(country, time) |>
  summarise(below_upper_sec_mean = mean(obs_value))
  
# Join and calculate index
relative_earnings_index <- relative_earnings |>
  group_by(country, time, educ_group, sex, break_in_series, source, currency, indicator) |> 
  summarise(mean_value = mean(obs_value)) |>
  ungroup() |> 
  left_join(upper_sec_means, by = join_by(country, time)) |>
  left_join(below_upper_sec_means, by = join_by(country, time)) |>
  mutate(upper_sec_index = mean_value / upper_sec_mean * 100,
         below_upper_sec_index = mean_value / below_upper_sec_mean * 100)

# removing intermediate dfs
rm(upper_sec_means)
rm(below_upper_sec_means)

rm(relative_earnings)
rm(earnings_educ)
rm(earnings_educ_raw)
```

## Combining all the ILO measures

```{r economy-indicators}
# With unemployment - more than 100 means disadvantage from education
macro_indicators <- unemployment_index |> 
  select(-mean_value, -upper_sec_mean, -below_upper_sec_mean) |> 
  filter(educ_group == "tertiary" | educ_group == "upper-secondary") |> 
  pivot_longer(
    cols = c(upper_sec_index, below_upper_sec_index),
    names_to = "index",
    values_to = "index_value"
  ) |>
  mutate(index = str_remove(index, "_index")) |> 
  filter((educ_group == "upper-secondary" & index != "upper_sec") | (educ_group == "tertiary" & index != "below_upper_sec")) |>
  
  # now making the averages
  group_by(country, time, sex) |> 
  summarise(educ_unemployment_advantage = mean(index_value)) |> 
  ungroup()

# with earnings - higher means greater advantage
macro_indicators <- 
  full_join(macro_indicators,
  
  # constructing the other measure
  relative_earnings_index |>           
  select(-mean_value, -upper_sec_mean, -below_upper_sec_mean) |> 
  filter(educ_group == "tertiary" | educ_group == "upper-secondary") |> 
  pivot_longer(
    cols = c(upper_sec_index, below_upper_sec_index),
    names_to = "index",
    values_to = "index_value"
  ) |>
  mutate(index = str_remove(index, "_index")) |> 
  filter((educ_group == "upper-secondary" & index != "upper_sec") | (educ_group == "tertiary" & index != "below_upper_sec")) |>
  
  # now making the averages
  group_by(country, time, sex) |> 
  summarise(educ_earnings_advantage = mean(index_value)) |> 
  ungroup(),
  
  by = join_by(country, time, sex)
  )

# adding female labour force participation

macro_indicators <- 
  full_join(macro_indicators,
    lf_rate_combined |> 
      filter(sex == "Female") |> 
      select(-sex, -age, - source, - indicator) |> 
      rename(female_lfp_rate = obs_value),
    by = join_by(country, time)
  ) |>
  select(-sex) |> 
  arrange(country, time)
  
  # adding men
macro_indicators <-
  full_join(macro_indicators,
    lf_rate_combined |> 
      filter(sex == "Male") |> 
      select(-sex, -age, - source, - indicator) |> 
      rename(male_lfp_rate = obs_value),
    by = join_by(country, time)
  )

# removing intermediate dfs
rm(lf_rate_combined)
rm(relative_earnings_index)
rm(unemployment_index)
```

## Value measures

I learned a new thing here - you can rename columns directly inside select (newname = oldname).

I load in the IVS (EVS + WVS) full time-series into R and pick out variables of interest.

```{r IVS}
# load in integrated values survey (created with a stata script from GESIS)
gender_role_attitudes_raw <- 
  read_dta(paste0(data_path, "/macro/Integrated_values_surveys_1981-2022.dta")) |> 
  clean_names("snake") |> 
  
  # Variable selection
  select(
    # respid
    respid = s007_01,
    
    # details about the study and country
    studyno,
    time = s020, # study year
    s009,
    
    # weights
    s017,
    s018,
    s019,
    pwght,
    
    # indicators
    
    # gender role attitudes
    housewife = d057, # Being a housewife just as fulfilling
    equal_contribution = d058, # Husband and wife should both contribute to income
    men_political_leader = d059, # Men make better political leaders than women do
    university_for_boys = d060, # University is more important for a boy than for a girl
    pre-school_suffer = d061, # Pre-school child suffers with working mother
    women_want_home = d062, # Women want a home and children
    women_job_indep = d063, # Job best way for women to be independent (4 categories)
    
    # family diversity acceptance
    child_needs_mum_dad = d018, # Child needs a home with father and mother
    woman_children_fulfilled = d019, # A woman has to have children to be fulfilled
    fathers_good_with_children = d064, # Fathers are well suited for looking after children
    
    # interesting
    marriage_outdated = d022 # Marriage is an out-dated institution
  ) |> 
  
  # GB and North Ireland are separated, I'm going to squish them together
  mutate(s009 = case_when(
    s009 == "NIR" ~ "GB",
    str_detect(s009, "^GB-") ~ "GB",
    TRUE ~ S009
  )) |> 
  
  # getting country names
  mutate(
    country = countrycode(s009, "iso2c", "country.name"),
    .before = everything()
  ) |> 
  
  # filter for countries in my analysis
  filter(country %in% unique(micro_clean$country))
```

#### Family diversity acceptance

```{r family-diversity-acceptance}

```

#### Gender role attitudes

```{r gender role attitudes}

```

## Finishing touches - interpolation of missing values
